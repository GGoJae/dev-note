services:
  postgres:
    image: postgres:16-alpine
    container_name: study-postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      PGDATA: /var/lib/postgresql/data/pgdata
      TZ: Asia/Seoul
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./ops/postgres/init:/docker-entrypoint-initdb.d:ro
    ports: ["5432:5432"]
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $POSTGRES_USER -d $POSTGRES_DB"]
      interval: 5s
      timeout: 5s
      retries: 20
    networks: [backend]

  redis:
    image: redis:7-alpine
    container_name: study-redis
    command: ["redis-server", "--appendonly", "yes"]
    volumes:
      - redisdata:/data
    ports: ["6379:6379"]
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 3s
      timeout: 3s
      retries: 20
    networks: [backend]

  backend:
    image: gradle:8.10.2-jdk17
    container_name: study-backend
    working_dir: /workspace
    volumes:
      - ./backend:/workspace
      - backend_gradle:/home/gradle/.gradle
    environment:
      TZ: Asia/Seoul
      SPRING_PROFILES_ACTIVE: dev
      # DB
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/${POSTGRES_DB}
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD}
      # Redis
      SPRING_REDIS_HOST: redis
      SPRING_REDIS_PORT: 6379
    ports: ["8080:8080"]
    depends_on:
      postgres: { condition: service_healthy }
      redis: { condition: service_healthy }
    command: >
      sh -lc "chmod +x ./gradlew &&
              ./gradlew bootRun --no-daemon -x test"
    networks: [backend, edge]

  frontend:
    image: node:22
    container_name: study-frontend
    working_dir: /app
    volumes:
      - ./frontend:/app
      - /app/node_modules
    environment:
      TZ: Asia/Seoul
      VITE_API_BASE: http://localhost:8080
    ports: ["5173:5173"]
    command: sh -c "npm install && npm run dev -- --host 0.0.0.0"
    depends_on:
      backend: { condition: service_started }
    networks: [edge]

networks:
  backend: {}
  edge: {}

volumes:
  pgdata: {}
  redisdata: {}
  backend_gradle: {}
